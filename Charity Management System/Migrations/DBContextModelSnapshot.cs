// <auto-generated />
using System;
using Charity_Management_System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Charity_Management_System.Migrations
{
    [DbContext(typeof(DBContext))]
    partial class DBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Charity_Management_System.Award", b =>
                {
                    b.Property<int>("awardID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("awardID"));

                    b.Property<string>("awardType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("awardID");

                    b.ToTable("Awards");
                });

            modelBuilder.Entity("Charity_Management_System.Organization", b =>
                {
                    b.Property<int>("organizationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("organizationID"));

                    b.Property<string>("attachment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ceoID")
                        .HasColumnType("int");

                    b.Property<string>("organizationDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("organizationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("shutdownDay")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("startTime")
                        .HasColumnType("datetime2");

                    b.HasKey("organizationID");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("Charity_Management_System.OrganizationMember", b =>
                {
                    b.Property<int>("organizationID")
                        .HasColumnType("int");

                    b.Property<int>("userID")
                        .HasColumnType("int");

                    b.HasKey("organizationID", "userID");

                    b.HasIndex("organizationID")
                        .IsUnique();

                    b.HasIndex("userID")
                        .IsUnique();

                    b.ToTable("OrganizationMember");
                });

            modelBuilder.Entity("Charity_Management_System.OrganizationResource", b =>
                {
                    b.Property<int>("resourceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("resourceID"));

                    b.Property<string>("contentTransaction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("organizationID")
                        .HasColumnType("int");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<string>("resourceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("resourceID");

                    b.HasIndex("organizationID")
                        .IsUnique();

                    b.ToTable("OrganizationResources");
                });

            modelBuilder.Entity("Charity_Management_System.OrganizationToProjectTransactionHistory", b =>
                {
                    b.Property<int>("transactionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("transactionID"));

                    b.Property<string>("message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("organizationID")
                        .HasColumnType("int");

                    b.Property<int>("projectID")
                        .HasColumnType("int");

                    b.Property<DateTime>("time")
                        .HasColumnType("datetime2");

                    b.HasKey("transactionID");

                    b.HasIndex("organizationID")
                        .IsUnique();

                    b.HasIndex("projectID")
                        .IsUnique();

                    b.ToTable("OrganizationToProjectTransactionHistory");
                });

            modelBuilder.Entity("Charity_Management_System.Project", b =>
                {
                    b.Property<int>("projectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("projectID"));

                    b.Property<string>("attachment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("endTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("leaderID")
                        .HasColumnType("int");

                    b.Property<int>("organizationID")
                        .HasColumnType("int");

                    b.Property<string>("projectDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("projectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("requestID")
                        .HasColumnType("int");

                    b.Property<DateTime>("startTime")
                        .HasColumnType("datetime2");

                    b.HasKey("projectID");

                    b.HasIndex("organizationID")
                        .IsUnique();

                    b.HasIndex("requestID")
                        .IsUnique();

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Charity_Management_System.ProjectMember", b =>
                {
                    b.Property<int>("projectID")
                        .HasColumnType("int");

                    b.Property<int>("userID")
                        .HasColumnType("int");

                    b.HasKey("projectID", "userID");

                    b.HasIndex("projectID")
                        .IsUnique();

                    b.HasIndex("userID")
                        .IsUnique();

                    b.ToTable("ProjectMembers");
                });

            modelBuilder.Entity("Charity_Management_System.ProjectResource", b =>
                {
                    b.Property<int>("resourceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("resourceID"));

                    b.Property<int>("expectedQuantity")
                        .HasColumnType("int");

                    b.Property<int>("projectID")
                        .HasColumnType("int");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<string>("resourceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("resourceID");

                    b.HasIndex("projectID")
                        .IsUnique();

                    b.ToTable("ProjectResources");
                });

            modelBuilder.Entity("Charity_Management_System.Request", b =>
                {
                    b.Property<int>("requestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("requestID"));

                    b.Property<string>("attachment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("creationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isEmergency")
                        .HasColumnType("bit");

                    b.Property<string>("location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<int>("userID")
                        .HasColumnType("int");

                    b.HasKey("requestID");

                    b.HasIndex("userID")
                        .IsUnique();

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("Charity_Management_System.User", b =>
                {
                    b.Property<int>("userID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("userID"));

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("awardID")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("roleID")
                        .HasColumnType("int");

                    b.HasKey("userID");

                    b.HasIndex("awardID")
                        .IsUnique()
                        .HasFilter("[awardID] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Charity_Management_System.UserToOrganizationTransactionHistory", b =>
                {
                    b.Property<int>("transactionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("transactionID"));

                    b.Property<string>("message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("organizationID")
                        .HasColumnType("int");

                    b.Property<DateTime>("time")
                        .HasColumnType("datetime2");

                    b.Property<int>("userID")
                        .HasColumnType("int");

                    b.HasKey("transactionID");

                    b.HasIndex("organizationID")
                        .IsUnique();

                    b.HasIndex("userID")
                        .IsUnique();

                    b.ToTable("UserToOrganizationTransactionHistories");
                });

            modelBuilder.Entity("Charity_Management_System.UserToProjectTransactionHistory", b =>
                {
                    b.Property<int>("transactionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("transactionID"));

                    b.Property<string>("message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("projectID")
                        .HasColumnType("int");

                    b.Property<DateTime>("time")
                        .HasColumnType("datetime2");

                    b.Property<int>("userID")
                        .HasColumnType("int");

                    b.HasKey("transactionID");

                    b.HasIndex("projectID");

                    b.HasIndex("userID")
                        .IsUnique();

                    b.ToTable("UserToProjectTransactionHistories");
                });

            modelBuilder.Entity("Charity_Management_System.OrganizationMember", b =>
                {
                    b.HasOne("Charity_Management_System.Organization", "organization")
                        .WithOne("organizationMember")
                        .HasForeignKey("Charity_Management_System.OrganizationMember", "organizationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Charity_Management_System.User", "user")
                        .WithOne("organizationMember")
                        .HasForeignKey("Charity_Management_System.OrganizationMember", "userID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("organization");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Charity_Management_System.OrganizationResource", b =>
                {
                    b.HasOne("Charity_Management_System.Organization", "organization")
                        .WithOne("organizationResource")
                        .HasForeignKey("Charity_Management_System.OrganizationResource", "organizationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("organization");
                });

            modelBuilder.Entity("Charity_Management_System.OrganizationToProjectTransactionHistory", b =>
                {
                    b.HasOne("Charity_Management_System.Organization", "organization")
                        .WithOne("organizationToProjectTransactionHistory")
                        .HasForeignKey("Charity_Management_System.OrganizationToProjectTransactionHistory", "organizationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Charity_Management_System.Project", "project")
                        .WithOne("organizationToProjectTransactionHistory")
                        .HasForeignKey("Charity_Management_System.OrganizationToProjectTransactionHistory", "projectID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("organization");

                    b.Navigation("project");
                });

            modelBuilder.Entity("Charity_Management_System.Project", b =>
                {
                    b.HasOne("Charity_Management_System.Organization", "organization")
                        .WithOne("project")
                        .HasForeignKey("Charity_Management_System.Project", "organizationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Charity_Management_System.Request", "request")
                        .WithOne("project")
                        .HasForeignKey("Charity_Management_System.Project", "requestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("organization");

                    b.Navigation("request");
                });

            modelBuilder.Entity("Charity_Management_System.ProjectMember", b =>
                {
                    b.HasOne("Charity_Management_System.Project", "project")
                        .WithOne("projectMember")
                        .HasForeignKey("Charity_Management_System.ProjectMember", "projectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Charity_Management_System.User", "user")
                        .WithOne("projectMember")
                        .HasForeignKey("Charity_Management_System.ProjectMember", "userID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("project");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Charity_Management_System.ProjectResource", b =>
                {
                    b.HasOne("Charity_Management_System.Project", "project")
                        .WithOne("projectResource")
                        .HasForeignKey("Charity_Management_System.ProjectResource", "projectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("project");
                });

            modelBuilder.Entity("Charity_Management_System.Request", b =>
                {
                    b.HasOne("Charity_Management_System.User", "user")
                        .WithOne("request")
                        .HasForeignKey("Charity_Management_System.Request", "userID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Charity_Management_System.User", b =>
                {
                    b.HasOne("Charity_Management_System.Award", "award")
                        .WithOne("user")
                        .HasForeignKey("Charity_Management_System.User", "awardID");

                    b.Navigation("award");
                });

            modelBuilder.Entity("Charity_Management_System.UserToOrganizationTransactionHistory", b =>
                {
                    b.HasOne("Charity_Management_System.Organization", "organization")
                        .WithOne("userToOrganizationTransactionHistory")
                        .HasForeignKey("Charity_Management_System.UserToOrganizationTransactionHistory", "organizationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Charity_Management_System.User", "user")
                        .WithOne("userToOrganizationTransactionHistory")
                        .HasForeignKey("Charity_Management_System.UserToOrganizationTransactionHistory", "userID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("organization");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Charity_Management_System.UserToProjectTransactionHistory", b =>
                {
                    b.HasOne("Charity_Management_System.Project", "project")
                        .WithMany()
                        .HasForeignKey("projectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Charity_Management_System.User", "user")
                        .WithOne("userToProjectTransactionHistory")
                        .HasForeignKey("Charity_Management_System.UserToProjectTransactionHistory", "userID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("project");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Charity_Management_System.Award", b =>
                {
                    b.Navigation("user")
                        .IsRequired();
                });

            modelBuilder.Entity("Charity_Management_System.Organization", b =>
                {
                    b.Navigation("organizationMember")
                        .IsRequired();

                    b.Navigation("organizationResource")
                        .IsRequired();

                    b.Navigation("organizationToProjectTransactionHistory")
                        .IsRequired();

                    b.Navigation("project")
                        .IsRequired();

                    b.Navigation("userToOrganizationTransactionHistory")
                        .IsRequired();
                });

            modelBuilder.Entity("Charity_Management_System.Project", b =>
                {
                    b.Navigation("organizationToProjectTransactionHistory");

                    b.Navigation("projectMember")
                        .IsRequired();

                    b.Navigation("projectResource")
                        .IsRequired();
                });

            modelBuilder.Entity("Charity_Management_System.Request", b =>
                {
                    b.Navigation("project")
                        .IsRequired();
                });

            modelBuilder.Entity("Charity_Management_System.User", b =>
                {
                    b.Navigation("organizationMember")
                        .IsRequired();

                    b.Navigation("projectMember")
                        .IsRequired();

                    b.Navigation("request")
                        .IsRequired();

                    b.Navigation("userToOrganizationTransactionHistory")
                        .IsRequired();

                    b.Navigation("userToProjectTransactionHistory")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
