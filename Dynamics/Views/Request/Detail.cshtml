@inject IHttpContextAccessor Accessor
@model Dynamics.Models.Models.Request
@{
    ViewData["Title"] = "Detail request";
    // take current user
    var userIDString = Accessor.HttpContext.Session.GetString("currentUserID");

    string[] projectImages = new string[1] { ","};
    if (Model.Attachment != null)
    {
        projectImages = Model.Attachment.TrimEnd(',', ' ').Split(",");
    }
    
}

<!-- container start -->
<div class="m-w-screen-2xl flex  justify-start relative">
    @if (Model.UserID.Equals(new Guid(userIDString)))
    {
        <!-- edit button -->
        <a asp-action="Edit" asp-route-id="@Model.RequestID" title="Edit request profile">
            <button type="button"
            class="absolute top-5 w-fit h-fit mx-2 my-2 p-2 " style="right:-5px;">
                <i class="fa-solid fa-pen-to-square text-4xl text-gray-900"></i>
            </button>
        </a>
    }
    <div class="relative my-14 ml-8 mr-4 flex flex-col text-xl" style="width: 66%">
        <!-- part 1-image -->
        <div class="ml-14 max-w-5xl w-full justify-end items-center">
            <div class="relative items-center">
                <!-- Main image container -->
                <div id="carousel" class=" bg-gray-300 rounded-lg overflow-hidden" style="height:32rem;width:65rem;">
                    <!-- Images will be inserted here by JavaScript -->
                </div>
            </div>

            <!-- Indicator dots  -->
            <div class="flex justify-center my-10 mt-4 space-x-2 relative">
                <!-- Navigation buttons -->
                
                @foreach (var img in projectImages)
                {
                    <div onclick="updateCarouselAsUserWant('@img')" class=" relative w-20 h-20 bg-gray-300 rounded-xl mr-2 hover:ring-4 hover:ring-blue-500 cursor-pointer">
                        <img src="@img" class="w-full h-full items-center rounded-xl">
                        </div>
                }
                <button id="prevBtn"
                        class="absolute top-10  transform -translate-y-1/2 bg-white rounded-full p-2 shadow-md" style="left:14rem;">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                         xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7">
                        </path>
                    </svg>
                </button>
                <button id="nextBtn"
                        class="absolute top-10 transform -translate-y-1/2 bg-white rounded-full p-2 shadow-md" style="right:14rem;">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                         xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7">
                        </path>
                    </svg>
                </button>
            </div>
        </div>
        <!-- end part 1-image -->
        <div class="border-t p-6 ">
            <h2 class="font-semibold mb-2 text-black text-3xl">Contact Information:</h2>
            <p class="text-gray-600">✉ @Model.RequestEmail</p>
            <p class="text-gray-600">📞 @Model.RequestPhoneNumber</p>
            <p class="text-gray-600">🏠 @Model.Location</p>
        </div>
        <div class="border-t p-4 mt-0">
            <h2 class="font-semibold mb-2 text-black text-3xl">Description</h2>
            <p class="text-gray-600 line-clamp-3">
              @Model.Content
            </p>
            <a href="#" class="text-gray-400 flex justify-center font-normal">View more...</a>
        </div>
        <div class="border-t p-4 mt-0">
            <h2 class="font-semibold mb-2 text-black text-3xl">Requester</h2>
            <div class="flex justify-start">
                <div>
                    <img class="rounded-full w-14 h-14 mx-4 mb-4"
                             src="@Model.User.UserAvatar"
                         alt="avatar">
                </div>
                <div class="flex flex-col ">
                    <p class="text-gray-600 font-normal">
                        Requester: <span class="text-black font-bold">
                           @Model.User.UserFullName
                        </span>
                    </p>
                        <p class="text-gray-400 font-normal text-base ">Address: @Model.User.UserAddress</p>
                </div>
            </div>
        </div>
    </div>
</div>
<script>
    @* close modal *@
        function closeModal() {
            document.getElementById('ReportModal').close();
        }

    @* handle carousel *@
    const carousel = document.getElementById('carousel');
    const prevBtn = document.getElementById('prevBtn');
    const nextBtn = document.getElementById('nextBtn');
    const images = @Html.Raw(Json.Serialize(projectImages));

    let currentIndex = 0;

    function updateCarouselAsUserWant(src) {
        // Update the carousel with the selected image
        carousel.innerHTML = `<img src="${src}" class="w-full object-cover items-center cursor-pointer" alt="Project image" style="height: 40rem;">`;

        const srcFilename = src.split('/').pop(); // Get the file name from the src
        const indicators = document.querySelectorAll('.flex.justify-center.mt-4.space-x-2 > div > img');

        // Loop through each indicator to compare its src with the selected image src
        indicators.forEach((indicator) => {
            const indicatorFilename = indicator.src.split('/').pop(); // Get the file name from the indicator src

            // Compare the filenames of the indicator's img and the selected image
            if (indicatorFilename === srcFilename) {
                // Apply special class to highlight the current image (e.g., a mask or border)
                indicator.classList.add('ring-4', 'ring-blue-500');
            } else {
                // Remove the highlight from other images
                indicator.classList.remove('ring-4', 'ring-blue-500');
            }
        });
    }
    function updateCarousel() {
        carousel.innerHTML = `<img src="${images[currentIndex]}" class="w-full object-cover items-center" alt="Project image" style="height: 40rem;">`;
        updateIndicators();
    }

    function updateIndicators() {
        // Select all the image indicators
        const indicators = document.querySelectorAll('.flex.justify-center.mt-4.space-x-2 > div > img');
        indicators.forEach((indicator, index) => {
            if (index === currentIndex) {
                // Apply special class to highlight the current image (e.g., a mask or border)
                indicator.classList.add('ring-4', 'ring-blue-500');
            } else {
                // Remove the highlight from other images
                indicator.classList.remove('ring-4', 'ring-blue-500');
            }
        });
    }

    prevBtn.addEventListener('click', () => {
        currentIndex = (currentIndex - 1 + images.length) % images.length;
        updateCarousel();
    });

    nextBtn.addEventListener('click', () => {
        currentIndex = (currentIndex + 1) % images.length;
        updateCarousel();
    });

    // Initialize the carousel
    updateCarousel();

</script>